#+TITLE: Proton's Emacs Configuration
** Dependencies
*** EXWM
Since this is a literal *window manager* (seriously, I'm still impressed that emacs can do this), you need the following:
- =xorg-server=
- =alsa-utils=, to control the audio
- =ttf-iosevka=, default font specified in the config, change it in the config for your preferred font of choice.
*** Telega.el
- =telegram-tdlib=, available in the AUR.
*** Miscellaneous
Make sure to have a ~/.authinfo file to login to ERC.
** General Emacs settings
*** Removing backup files and autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

*** Inhibiting the startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

*** Adding an alias for yes/no prompts, setting bash as the default shell
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defvar default-shell "/bin/bash")
  (defadvice term (before force-bash)
    (interactive (list default-shell)))
  (ad-activate 'term)
#+END_SRC

*** More comfortable line-by-line scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Visual additions
*** Removing ugly toolbar, scrollbar, and menubar from GUI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** Setting line numbers to run solely in programming modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Iosevka-10"))
#+END_SRC

*** Gotham
#+BEGIN_SRC emacs-lisp
  (use-package gotham-theme
    :ensure t
    :config
    (load-theme 'gotham t))

#+END_SRC
** Org
*** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Keybindings
*** Change undo to C-z
#+BEGIN_SRC emacs-lisp
  (global-unset-key "\C-z")
  (global-set-key "\C-z" 'undo)
#+END_SRC

#+END_SRC
*** Move buffers around
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)
#+END_SRC
*** Reload configuration
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . 'magit-status))
#+END_SRC
** EXWM
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (require 'exwm-randr)
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)
    (setq exwm-workspace-number 10)
    (setq exwm-randr-workspace-output-plist '(0 "HDMI-A-0" 1 "HDMI-A-0" 2 "HDMI-A-0" 3 "HDMI-A-0" 4 "HDMI-A-0" 5 "DVI-D-0" 6 "DVI-D-0" 7 "DVI-D-0" 8 "DVI-D-0" 9 "DVI-D-0"))
    (display-time-mode 1)
    ;; Bindings
    (exwm-input-set-key (kbd "s-r") #'exwm-reset)
    (exwm-input-set-key (kbd "s-k") #'exwm-workspace-delete)
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-swap)

    ;; Bindings for window movement
    (setq exwm-input-global-keys
      `((,(kbd "s-<up>") . windmove-up)
        (,(kbd "s-<down>") . windmove-down)
        (,(kbd "s-<left>") . windmove-left)
        (,(kbd "s-<right>") . windmove-right)
	(,(kbd "s-S-<up>") . buf-move-up)
	(,(kbd "s-S-<down>") . buf-move-down)
	(,(kbd "s-S-<left>") . buf-move-left)
	(,(kbd "s-S-<right>") . buf-move-right)))

    (dotimes (i 10)
      (exwm-input-set-key (kbd (format "s-%d" i))
			  `(lambda ()
			     (interactive)
			     (exwm-workspace-switch-create ,i))))
    (exwm-input-set-key (kbd "s-d")
			(lambda (command)
			  (interactive (list (read-shell-command "$ ")))
			  (start-process-shell-command command nil command)))

 
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    (exwm-input-set-simulation-keys
       '(
	 ;; movement
	 ([?\C-b] . left)
	 ([?\M-b] . C-left)
	 ([?\C-f] . right)
	 ([?\M-f] . C-right)
	 ([?\C-p] . up)
	 ([?\C-n] . down)
	 ([?\C-a] . home)
	 ([?\C-e] . end)
	 ([?\M-v] . prior)
	 ([?\C-v] . next)
	 ([?\C-d] . delete)
	 ([?\C-k] . (S-end delete))
	 ;; cut/paste
	 ([?\C-w] . ?\C-x)
	 ([?\M-w] . ?\C-c)
	 ([?\C-y] . ?\C-v)
	 ;; search
	 ([?\C-s] . ?\C-f)))

    (exwm-enable)
    (exwm-randr-enable))
#+END_SRC
** Telega.el
#+BEGIN_SRC emacs-lisp
  (use-package telega
    :ensure t)
#+END_SRC
** ERC
#+BEGIN_SRC emacs-lisp

(setq auth-sources '("~/.authinfo"))
(setq erc-prompt-for-password nil)
;; Keybindings
(defun start-irc ()
"Connect to Freenode, with Emacs."
(interactive)
(erc-tls :server "irc.freenode.net" :port 6697 
:nick "yournickhere")
(setq erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#exwm"))))

#+END_SRC
