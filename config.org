#+TITLE: Proton's Emacs Configuration
** Dependencies for installation
In order for LSP functionality to work, you want to install the [[https://github.com/emacs-lsp/lsp-mode#supported-languages][LSP servers]] listed on the =lsp-mode= repository.
This config also requires emacs27+ to work correctly.
** Custom variables
These are variables that you can set in =M-x customize=. You can also just change them from the config file itself.
#+BEGIN_SRC emacs-lisp
  (defgroup proton
    nil
    "Configuration options for Proton's Emacs configuration."
    :group 'local)

  (defcustom proton-window-manager
    nil
    "Whether or not Emacs is used as a window manager."
    :type 'boolean
    :group 'proton)
#+END_SRC
** Configuration of built-in features
*** Autosave and backup file settings
This disables Emacs's default autosave and backup files.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
*** Remove the startup screen
This removes the useless startup screen in Emacs. It'll be replaced with [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]].
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
*** Interpret a new alias for yes/no
This simple line allows for yes/no to be answered with y/n. Saves a bit of time.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Set default shell in the terminal
Set your own default shell here for M-x term. It's a nice terminal for most uses.
#+BEGIN_SRC emacs-lisp
  (defvar default-shell "/bin/zsh")
  (defadvice term (before force-bash)
    (interactive (list default-shell)))
  (ad-activate 'term)
#+END_SRC
*** Line-by-line scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
*** Removing bars
I remove the toolbar and menubar so as to have less useless elements clutter the screen.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC
*** Programming mode-related tweaks
By default, Emacs doesn't enable line numbers with =(global-display-line-numbers-mode)=. 
Neither would I, as it isn't really useful for modes outside of programming modes. 
So, I just enable it for programming modes, and leave it off for others.
I also enable =hl-line-mode= for highlighting the current line for visiblity.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'conf-mode-hook 'display-line-numbers-mode)
  (add-hook 'conf-mode-hook 'hl-line-mode)
#+END_SRC
*** Replace functionality fix
By default, Emacs doesn't replace text that you've selected with newly typed text. With this line, text that is selected is deleted, then the new text being typed appears in its place.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode +1)
#+END_SRC
*** Font setting
This sets up =iosevka= as the font of choice. You can replace it with whatever font you want.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Iosevka-11"))
#+END_SRC
*** Change undo binding
For this, I unset the default binding for =C-z= (which is to suspend an emacs frame) and set it to be 
undo like most other programs.
#+BEGIN_SRC emacs-lisp
  (global-unset-key "\C-z")
  (global-set-key "\C-z" 'undo)
#+END_SRC
*** =M-x shell= prompt fix
This fixes the prompt being removable from =M-x shell= by backspacing.
#+BEGIN_SRC emacs-lisp
  (setq comint-prompt-read-only t)
#+END_SRC
*** Making an entire region uppercase
For some reason, Emacs by default removes the ability to capitalize regions in their
entirety, in the name of making the editor less confusing for new users. However,
I want this functionality, and so I re-enable it.
#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
#+END_SRC
** Packages
In this configuration, I use =use-package= to automatically install the packages, 
as well as to setup their configurations.
*** Visuals
**** Org bullets
This sets up some nice bullets for org-mode that look better than the default asterisks used in Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
      :hook 
      (org-mode . org-bullets-mode))
#+END_SRC
**** Theme
This installs the [[https://github.com/arcticicestudio/nord-emacs][nord-theme]], which is a really nice dark theme for Emacs and other editors/terminals.
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :config
    (setq base16-distinct-fringe-background nil)
    (load-theme 'base16-brewer t))

  (defvar my:theme 'base16-brewer)
  (defvar my:theme-window-loaded nil)
  (defvar my:theme-terminal-loaded nil)

  (if (daemonp)
      (add-hook 'after-make-frame-functions(lambda (frame)
					    (select-frame frame)
					    (if (window-system frame)
						(unless my:theme-window-loaded
						  (if my:theme-terminal-loaded
						      (enable-theme my:theme)
						    (load-theme my:theme t))
						  (setq my:theme-window-loaded t)
						  )
					      (unless my:theme-terminal-loaded
						(if my:theme-window-loaded
						    (enable-theme my:theme)
						  (load-theme my:theme t))
						(setq my:theme-terminal-loaded t)
						)
					      )))

    (progn
      (load-theme my:theme t)
      (if (display-graphic-p)
	  (setq my:theme-window-loaded t)
	(setq my:theme-terminal-loaded t)))
    )
#+END_SRC
**** Dashboard
This installs [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]], which is a far more customizable and better startup screen than the default.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-set-footer nil)
    (dashboard-startup-banner 'logo)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC
**** Powerline
This is a port of the popular [[https://github.com/milkypostman/powerline][Powerline]] modeline customization from Vim. It makes the modeline look a little nicer.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+END_SRC
**** smart-mode-line
[[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]] is a customization package designed to add colors and other niceties to the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (setq sml/no-confirm-load-theme t)
    (sml/setup))

  (use-package smart-mode-line-powerline-theme)
#+END_SRC

**** all-the-icons
[[https://github.com/domtronn/all-the-icons.el][all-the-icons.el]] is a package that adds icons to certain parts of Emacs. 
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
*** Programming-related functionality
**** =lsp= completion
This installs [[https://github.com/joaotavora/eglot][eglot]], which adds IDE-like functionality to Emacs for certain languages through language servers. Completion is provided by [[http://company-mode.github.io/][company]].
#+BEGIN_SRC emacs-lisp
  ;; install eglot
  (use-package eglot
    :hook
    (prog-mode . eglot-ensure)
  )

  ;; sets up company
  (use-package company
    :hook
    (prog-mode . company-mode)
    :config
    ;; recommended settings by lsp-mode
    (setq company-minimum-prefix-length 1
	  company-idle-delay 0.0
	  company-backends '((company-capf company-dabbrev-code))))
#+END_SRC
**** Magit
This installs a package called [[https://github.com/magit/magit][magit]], which allows you to use git within emacs itself. It also configures 
the bindings for =magit-status=, so one can actually use magit with its own seperate buffer in emacs.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind ("C-x g" . magit-status))
#+END_SRC
**** Flycheck
[[https://github.com/flycheck/flycheck][Flycheck]] is a syntax checking package for Emacs, with tons of languages supported by default. It's quite
handy for me, as I do programming relatively frequently, so having syntax checking constantly helps.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook
    (after-init . global-flycheck-mode))
#+END_SRC
*** Media/other desktop functionality
**** EMMS
[[https://www.gnu.org/software/emms/][EMMS]] is a multimedia system for Emacs. However, I use it as an MPD client, to interface with my already existing MPD instance on my PC.
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :defer t
    :straight (emms :type git :repo "https://git.savannah.gnu.org/git/emms.git")
    :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all)
    :custom
    (emms-seek-seconds 5)
    (emms-player-list '(emms-player-mpd))
    (emms-info-functions '(emms-info-mpd))
    (emms-player-mpd-server-name "localhost")
    (emms-player-mpd-server-port "6600")
    (emms-source-file-default-directory "~/Music/"))
#+END_SRC
**** EXWM
[[https://github.com/ch11ng/exwm][EXWM]] is an X window manager implemented entirely within Emacs. It's quite handy.
#+BEGIN_SRC emacs-lisp
  (when (eq proton-window-manager t) 
    (defun exwm-screenshot ()
      (interactive)
      (start-process-shell-command "python" nil "python ~/.scripts/screenshotter/screenshotter.py"))

    (defun exwm-launch (command)
      "Starts up an application in EXWM."
      (interactive
       (list (read-shell-command "$ ")))
      (start-process-shell-command command nil command))

    (use-package exwm
      :if window-system
      :straight (exwm :type git :host github :repo "ch11ng/exwm")
      :init
      (require 'exwm-randr)
      :custom
      (exwm-input-global-keys
       `(([?\s-d] . exwm-launch)
	 ([print] . exwm-screenshot)
	 ([?\s-r] . exwm-reset)
	 ([?\s-w] . exwm-workspace-switch)
	 ,@(mapcar (lambda (i)
		     `(,(kbd (format "s-%d" i)) .
		       (lambda ()
			 (interactive)
			 (exwm-workspace-switch-create ,i))))
		   (number-sequence 0 9))))
      (exwm-workspace-number 10)
      :config
      (setq exwm-randr-workspace-output-plist '(0 "HDMI-A-0" 1 "HDMI-A-0" 2 "HDMI-A-0" 3 "HDMI-A-0" 4 "HDMI-A-0" 5 "DisplayPort-0" 6 "DisplayPort-0" 7 "DisplayPort-0" 8 "DisplayPort-0" 9 "DisplayPort-0"))
      (exwm-enable)
      (exwm-randr-enable))

    (use-package windmove
      :bind (("s-<left>" . windmove-left)
	     ("s-<right>" . windmove-right)
	     ("s-<up>" . windmove-up)
	     ("s-<down>" . windmove-down))
      :config
      (windmove-default-keybindings 'meta)))
#+END_SRC
*** Startup fixes
**** GCMH
[[https://gitlab.com/koral/gcmh/][The Garbage Collection Magic Hack]] is a very useful tool to reduce startup time for Emacs by allowing the garbage collection to run when Emacs is idle.
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :straight (gcmh :host gitlab :repo "koral/gcmh")
    :config 
    (require 'gcmh)
    (gcmh-mode 1))
#+END_SRC
*** Helm
[[https://github.com/emacs-helm/helm/][Helm]] is a software package that adds better autocompletion to Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
    :config
    (helm-mode 1))
#+END_SRC
